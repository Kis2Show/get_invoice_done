name: Dependency Update

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Check if requirements.in exists
      id: check-requirements-in
      run: |
        if [ -f requirements.in ]; then
          echo "requirements-in-exists=true" >> $GITHUB_OUTPUT
        else
          echo "requirements-in-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create requirements.in if not exists
      if: steps.check-requirements-in.outputs.requirements-in-exists == 'false'
      run: |
        echo "# Main dependencies" > requirements.in
        echo "fastapi>=0.104.0" >> requirements.in
        echo "uvicorn[standard]>=0.24.0" >> requirements.in
        echo "sqlalchemy>=2.0.0" >> requirements.in
        echo "alembic>=1.12.0" >> requirements.in
        echo "python-multipart>=0.0.6" >> requirements.in
        echo "jinja2>=3.1.0" >> requirements.in
        echo "python-dotenv>=1.0.0" >> requirements.in
        echo "pydantic>=2.5.0" >> requirements.in
        echo "pydantic-settings>=2.1.0" >> requirements.in
        echo "easyocr>=1.7.0" >> requirements.in
        echo "opencv-python>=4.8.0" >> requirements.in
        echo "pillow>=10.0.0" >> requirements.in
        echo "numpy>=1.24.0" >> requirements.in
        echo "pandas>=2.0.0" >> requirements.in
        echo "pymupdf>=1.23.0" >> requirements.in
        echo "requests>=2.31.0" >> requirements.in
        echo "aiofiles>=23.0.0" >> requirements.in

    - name: Update requirements
      run: |
        # Backup current requirements
        cp requirements.txt requirements.txt.backup

        # Update dependencies
        if [ -f requirements.in ]; then
          pip-compile --upgrade requirements.in
        else
          echo "No requirements.in found, skipping pip-compile"
        fi

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        # Install current requirements first
        pip install -r requirements.txt
        # Run safety check and generate report
        safety check --json --output safety-report.json || echo '{"vulnerabilities": [], "scan_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "status": "completed"}' > safety-report.json
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🔄 Automated Dependency Update'
        body: |
          ## 🔄 自动依赖更新
          
          此PR由GitHub Actions自动创建，用于更新项目依赖包到最新版本。
          
          ### 📦 更新内容
          - 更新了 `requirements.txt` 中的依赖包版本
          - 运行了安全漏洞检查
          
          ### 🔍 检查项目
          - [ ] 查看依赖包版本变更
          - [ ] 运行测试确保兼容性
          - [ ] 检查安全漏洞报告
          - [ ] 验证应用功能正常
          
          ### 🚀 测试建议
          ```bash
          # 本地测试
          pip install -r requirements.txt
          python -m pytest tests/
          
          # Docker测试
          docker-compose build
          docker-compose up -d
          curl http://localhost:8000/health
          ```
          
          ### 📊 安全检查
          安全漏洞检查报告已生成，请查看是否有需要关注的安全问题。
          
          ---
          *此PR由 GitHub Actions 自动创建*
        branch: dependency-update
        delete-branch: true
        
    - name: Verify security report file
      run: |
        echo "=== Security Report Status ==="
        if [ -f safety-report.json ]; then
          echo "✅ safety-report.json found"
          echo "File size: $(stat -c%s safety-report.json) bytes"
          echo "File content preview:"
          head -n 5 safety-report.json
        else
          echo "❌ safety-report.json not found"
          echo "Creating empty report..."
          echo '{"vulnerabilities": [], "scan_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "status": "no_file_generated"}' > safety-report.json
        fi
        echo "=============================="

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-report
        path: |
          safety-report.json
          requirements.txt.backup
          requirements.txt
        retention-days: 30
        if-no-files-found: warn
